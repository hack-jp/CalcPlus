#pragma once

#define OUTOFFSET		8
#define INOFFSETX		6
#define INOFFSETY		8
#define BUTTON_WIDTH	120
#define BUTTON_HEIGHT	34
#define	DISPLAYHEIGHT	80

#define X1 (OUTOFFSET+BUTTON_WIDTH*0+INOFFSETX*0)
#define X2 (OUTOFFSET+BUTTON_WIDTH*1+INOFFSETX*1)
#define X3 (OUTOFFSET+BUTTON_WIDTH*2+INOFFSETX*2)
#define X4 (OUTOFFSET+BUTTON_WIDTH*3+INOFFSETX*3)
#define X5 (OUTOFFSET+BUTTON_WIDTH*4+INOFFSETX*4)

#define Y1 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*0+INOFFSETY*1)
#define Y2 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*1+INOFFSETY*2)
#define Y3 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*2+INOFFSETY*3)
#define Y4 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*3+INOFFSETY*4)
#define Y5 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*4+INOFFSETY*5)
#define Y6 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*5+INOFFSETY*6)
#define Y7 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*6+INOFFSETY*7)
#define Y8 (OUTOFFSET+DISPLAYHEIGHT+BUTTON_HEIGHT*7+INOFFSETY*8)

#define TEXTCOLOR D2D1::ColorF(0.4F, 0.4F, 0.4F)
#define DISPCOLOR D2D1::ColorF(RGB(243, 243, 243))
#define BACKCOLOR D2D1::ColorF(RGB(222, 222, 222))

#define ID_PASTE 1000
#define ID_COPY  1001

enum
{
	BUTTON_0,
	BUTTON_1,
	BUTTON_2,
	BUTTON_3,
	BUTTON_4,
	BUTTON_5,
	BUTTON_6,
	BUTTON_7,
	BUTTON_8,
	BUTTON_9,
	BUTTON_PLUS,
	BUTTON_MINUS,
	BUTTON_MULTIPLY,
	BUTTON_DIVIDE,
	BUTTON_POINT,
	BUTTON_EQUAL,
	BUTTON_CLEAR,
	BUTTON_LEFT,
	BUTTON_RIGHT,
	BUTTON_BACK,
	BUTTON_CLOSE,
	BUTTON_MAX
};

typedef struct
{
	TCHAR szText[4];
	int id;
	RECT rect;
}Button;

Button button[BUTTON_MAX] =
{
	{ TEXT("0"), BUTTON_0, { X2, Y4, X2 + BUTTON_WIDTH, Y4 + BUTTON_HEIGHT } },
	{ TEXT("1"), BUTTON_1, { X2, Y3, X2 + BUTTON_WIDTH, Y3 + BUTTON_HEIGHT } },
	{ TEXT("2"), BUTTON_2, { X3, Y3, X3 + BUTTON_WIDTH, Y3 + BUTTON_HEIGHT } },
	{ TEXT("3"), BUTTON_3, { X4, Y3, X4 + BUTTON_WIDTH, Y3 + BUTTON_HEIGHT } },
	{ TEXT("4"), BUTTON_4, { X2, Y2, X2 + BUTTON_WIDTH, Y2 + BUTTON_HEIGHT } },
	{ TEXT("5"), BUTTON_5, { X3, Y2, X3 + BUTTON_WIDTH, Y2 + BUTTON_HEIGHT } },
	{ TEXT("6"), BUTTON_6, { X4, Y2, X4 + BUTTON_WIDTH, Y2 + BUTTON_HEIGHT } },
	{ TEXT("7"), BUTTON_7, { X2, Y1, X2 + BUTTON_WIDTH, Y1 + BUTTON_HEIGHT } },
	{ TEXT("8"), BUTTON_8, { X3, Y1, X3 + BUTTON_WIDTH, Y1 + BUTTON_HEIGHT } },
	{ TEXT("9"), BUTTON_9, { X4, Y1, X4 + BUTTON_WIDTH, Y1 + BUTTON_HEIGHT } },
	{ TEXT("+"), BUTTON_PLUS, { X5, Y4, X5 + BUTTON_WIDTH, Y4 + BUTTON_HEIGHT } },
	{ TEXT("-"), BUTTON_MINUS, { X5, Y3, X5 + BUTTON_WIDTH, Y3 + BUTTON_HEIGHT } },
	{ TEXT("*"), BUTTON_MULTIPLY, { X5, Y2, X5 + BUTTON_WIDTH, Y2 + BUTTON_HEIGHT } },
	{ TEXT("/"), BUTTON_DIVIDE, { X5, Y1, X5 + BUTTON_WIDTH, Y1 + BUTTON_HEIGHT } },
	{ TEXT("."), BUTTON_POINT, { X3, Y4, X3 + BUTTON_WIDTH, Y4 + BUTTON_HEIGHT } },
	{ TEXT("="), BUTTON_EQUAL, { X4, Y4, X4 + BUTTON_WIDTH, Y4 + BUTTON_HEIGHT } },
	{ TEXT("C"), BUTTON_CLEAR, { X1, Y1, X1 + BUTTON_WIDTH, Y1 + BUTTON_HEIGHT } },
	{ TEXT("("), BUTTON_LEFT, { X1, Y3, X1 + BUTTON_WIDTH, Y3 + BUTTON_HEIGHT } },
	{ TEXT(")"), BUTTON_RIGHT, { X1, Y4, X1 + BUTTON_WIDTH, Y4 + BUTTON_HEIGHT } },
	{ TEXT("BS"), BUTTON_BACK, { X1, Y2, X1 + BUTTON_WIDTH, Y2 + BUTTON_HEIGHT } },
	{ TEXT(""), BUTTON_CLOSE, { 590, 0, 590 + 43, 0 + 19 } },
};

